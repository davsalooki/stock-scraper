const payoutMultipliers = [
	[1.25, 1.0, 0.833, 0.714, 0.625, 0.556, 0.5, 0.455, 0.417, 0.385, 0.357, 0.333],
	[1.875, 1.5, 1.25, 1.071, 0.938, 0.833, 0.75, 0.682, 0.625, 0.577, 0.536, 0.5],
	[2.5, 2.0, 1.667, 1.429, 1.25, 1.111, 1.0, 0.909, 0.833, 0.769, 0.714, 0.667],
	[3.125, 2.5, 2.083, 1.786, 1.563, 1.389, 1.25, 1.136, 1.042, 0.962, 0.893, 0.833],
	[3.75, 3.0, 2.5, 2.143, 1.875, 1.667, 1.5, 1.364, 1.25, 1.154, 1.071, 1.0],
	[4.375, 3.5, 2.917, 2.5, 2.188, 1.944, 1.75, 1.591, 1.458, 1.346, 1.25, 1.167],
	[5.0, 4.0, 3.333, 2.857, 2.5, 2.222, 2.0, 1.818, 1.667, 1.538, 1.429, 1.333],
	[5.625, 4.5, 3.75, 3.214, 2.813, 2.5, 2.25, 2.045, 1.875, 1.731, 1.607, 1.5],
	[6.25, 5.0, 4.167, 3.571, 3.125, 2.778, 2.5, 2.273, 2.083, 1.923, 1.786, 1.667],
	[6.875, 5.5, 4.583, 3.929, 3.438, 3.056, 2.75, 2.5, 2.292, 2.115, 1.964, 1.833],
	[7.5, 6.0, 5.0, 4.286, 3.75, 3.333, 3.0, 2.727, 2.5, 2.308, 2.143, 2.0],
	[8.125, 6.5, 5.417, 4.643, 4.063, 3.611, 3.25, 2.955, 2.708, 2.5, 2.321, 2.167],
	[8.75, 7.0, 5.833, 5.0, 4.375, 3.889, 3.5, 3.182, 2.917, 2.692, 2.5, 2.333],
	[9.375, 7.5, 6.25, 5.357, 4.688, 4.167, 3.75, 3.409, 3.125, 2.885, 2.679, 2.5],
	[10.0, 8.0, 6.667, 5.714, 5.0, 4.444, 4.0, 3.636, 3.333, 3.077, 2.857, 2.667],
	[10.625, 8.5, 7.083, 6.071, 5.313, 4.722, 4.25, 3.864, 3.542, 3.269, 3.036, 2.833],
	[11.25, 9.0, 7.5, 6.429, 5.625, 5.0, 4.5, 4.091, 3.75, 3.462, 3.214, 3.0],
	[11.875, 9.5, 7.917, 6.786, 5.938, 5.278, 4.75, 4.318, 3.958, 3.654, 3.393, 3.167],
	[12.5, 10.0, 8.333, 7.143, 6.25, 5.556, 5.0, 4.545, 4.167, 3.846, 3.571, 3.333],
	[13.125, 10.5, 8.75, 7.5, 6.563, 5.833, 5.25, 4.773, 4.375, 4.038, 3.75, 3.5],
	[13.75, 11.0, 9.167, 7.857, 6.875, 6.111, 5.5, 5.0, 4.583, 4.231, 3.929, 3.667],
	[14.375, 11.5, 9.583, 8.214, 7.188, 6.389, 5.75, 5.227, 4.792, 4.423, 4.107, 3.833],
	[15.0, 12.0, 10.0, 8.571, 7.5, 6.667, 6.0, 5.455, 5.0, 4.615, 4.286, 4.0]
];

const retentionMultipliers = [
	[1.429, 1.0, 0.72, 0.477, 0.356, 0.274, 0.218, 0.176, 0.146, 0.122, 0.104, 0.089],
	[2.734, 1.952, 1.494, 1.132, 0.868, 0.67, 0.531, 0.431, 0.356, 0.298, 0.253, 0.218],
	[4.332, 3.138, 2.508, 1.9, 1.494, 1.209, 1.0, 0.811, 0.67, 0.561, 0.477, 0.41],
	[6.191, 4.535, 3.748, 2.84, 2.233, 1.806, 1.494, 1.259, 1.076, 0.917, 0.779, 0.67],
	[8.288, 6.127, 5.203, 3.943, 3.1, 2.508, 2.075, 1.748, 1.494, 1.294, 1.132, 1.0],
	[10.606, 7.902, 6.867, 5.203, 4.092, 3.31, 2.738, 2.307, 1.972, 1.708, 1.494, 1.404],
	[13.133, 9.849, 8.733, 6.617, 5.203, 4.209, 3.482, 2.933, 2.508, 2.171, 1.9, 1.678],
	[15.856, 11.962, 10.796, 8.18, 6.432, 5.203, 4.305, 3.626, 3.1, 2.684, 2.349, 2.075],
	[18.768, 14.233, 13.05, 9.888, 7.776, 6.29, 5.203, 4.383, 3.748, 3.245, 2.84, 2.508],
	[21.859, 16.657, 15.493, 11.739, 9.231, 7.467, 6.177, 5.203, 4.449, 3.852, 3.371, 2.977],
	[25.125, 19.229, 18.119, 13.729, 10.796, 8.733, 7.225, 6.086, 5.203, 4.505, 3.943, 3.482],
	[28.557, 21.944, 20.928, 15.857, 12.469, 10.087, 8.344, 7.029, 6.01, 5.203, 4.554, 4.022],
	[32.152, 24.798, 23.914, 18.119, 14.248, 11.526, 9.535, 8.032, 6.867, 5.946, 5.203, 4.596],
	[35.905, 27.788, 27.076, 20.515, 16.132, 13.05, 10.796, 9.094, 7.776, 6.732, 5.891, 5.203],
	[39.811, 30.91, 30.411, 23.043, 18.119, 14.658, 12.126, 10.214, 8.733, 7.562, 6.617, 5.844],
	[43.866, 34.162, 33.918, 25.699, 20.209, 16.348, 13.524, 11.392, 9.74, 8.433, 7.38, 6.518],
	[48.067, 39.227, 37.593, 28.484, 22.399, 18.119, 14.989, 12.626, 10.796, 9.347, 8.18, 7.225],
	[52.41, 42.934, 41.436, 31.396, 24.688, 19.972, 16.521, 13.917, 11.899, 10.303, 9.016, 7.963],
	[56.893, 46.774, 45.444, 34.433, 27.076, 21.903, 18.119, 15.263, 13.05, 11.299, 9.888, 8.733],
	[61.512, 50.744, 49.615, 37.593, 29.561, 23.914, 19.783, 16.664, 14.248, 12.336, 10.796, 9.535],
	[66.265, 56.175, 53.949, 40.877, 32.143, 26.003, 21.511, 18.119, 15.493, 13.414, 11.739, 10.368],
	[71.15, 61.274, 58.443, 44.282, 34.821, 28.169, 23.302, 19.629, 16.783, 14.531, 12.717, 11.232],
	[76.163, 65.829, 63.096, 47.807, 37.593, 30.411, 25.158, 21.192, 18.119, 15.688, 13.729, 12.126]
];

function mapReturnToColumn(requiredReturn: number): number {
	// Columns from 4% ... 15%
	return requiredReturn - 4;
}

function mapRoeToRow(roe: number): number {
	// Rows from 5.00% to 60.00%, 2.5% increments
	// Linear map with two points: (5,0) and (60,22)

	// Floor to a multiple of 2.5
	roe = Math.floor(roe / 2.5) * 2.5;
	return 0.4 * roe - 2;
}

export function getPayoutMultiplier(roe: number, requiredReturn: number): number {
	const row = mapRoeToRow(roe);
	const column = mapReturnToColumn(requiredReturn);
	return payoutMultipliers[row][column];
}

export function getRetentionMultiplier(roe: number, requiredReturn: number): number {
	const row = mapRoeToRow(roe);
	const column = mapReturnToColumn(requiredReturn);
	return retentionMultipliers[row][column];
}
